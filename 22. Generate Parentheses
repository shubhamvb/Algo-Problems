/*
 Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.

For example, given n = 3, a solution set is:

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]
*/

public class Solution {
    public List<String> generateParenthesis(int n) {
        List<String> result = new ArrayList<String>();
        printParanthesis(result,0,0,n,"");
        return result;
    }
    
    private void printParanthesis(List<String> result, int left, int right, int n, String string)
    {
        if(right > left)
            return;
        if(left == n && right == n)
            result.add(string);
        if(left < n)
            printParanthesis(result, left + 1, right, n, string + "(");
        if(right < n)
            printParanthesis(result, left, right + 1, n, string + ")");
            
    }
    
}
