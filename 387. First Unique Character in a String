/*
 Given a string, find the first non-repeating character in it and return it's index. If it doesn't exist, return -1.

Examples:

s = "leetcode"
return 0.

s = "loveleetcode",
return 2.

Note: You may assume the string contain only lowercase letters. 
*/


public class Solution {
    public int firstUniqChar(String s) {
        if(s == null || s.length() == 0)
            return -1;
        int arr[] = new int[26];
        Arrays.fill(arr, -1);
        int uniqueIndex = s.length();
        
        for(int i=0; i<s.length(); i++)
        {
            if(arr[s.charAt(i)-'a'] == -1)
                arr[s.charAt(i)-'a'] = i;
            else if(arr[s.charAt(i)-'a'] >= 0)
                arr[s.charAt(i)-'a'] = -2;
        }
        
        for(int i=0; i<arr.length; i++)
        {
            if(arr[i] >=0)
              uniqueIndex = Math.min(uniqueIndex, arr[i]);  
        }
        
        if(uniqueIndex == s.length())
            return -1;
        else
            return uniqueIndex; 
    }
}
