/*
Note: This is an extension of House Robber.

After robbing those houses on that street, the thief has found himself a new place 
for his thievery so that he will not get too much attention. This time, all houses at this place are arranged in a circle. 
That means the first house is the neighbor of the last one.
Meanwhile, the security system for these houses remain the same as for those in the previous street.

Given a list of non-negative integers representing the amount of money of each house, 
determine the maximum amount of money you can rob tonight without alerting the police.
*/

public class Solution {
    public int rob(int[] nums) {
        if(nums == null || nums.length == 0)
            return 0;
        if(nums.length == 1)
            return nums[0];
        if(nums.length == 2)
            return Math.max(nums[0], nums[1]);
            
        int max1 = robCircularHouses(nums, 0, nums.length-2);
        int max2 = robCircularHouses(nums, 1, nums.length-1);
        System.out.println(max1+" "+ max2);
        return Math.max(max1, max2);
        
    }
    
    private int robCircularHouses(int[] nums, int l, int r)
    {
        int maxRobbery[] = new int[nums.length];
        maxRobbery[l] = nums[l];
        maxRobbery[l+1] = Math.max(nums[l], nums[l+1]);
        
        for(int i=l+2; i<=r; i++)
        {
            maxRobbery[i] = Math.max(maxRobbery[i-1], maxRobbery[i-2]+nums[i]);
        }
        
        return maxRobbery[r];
    } 
}
