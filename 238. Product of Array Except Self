/*
 Given an array of n integers where n > 1, nums, return an array output such that output[i] is equal 
 to the product of all the elements of nums except nums[i].

Solve it without division and in O(n).

For example, given [1,2,3,4], return [24,12,8,6].

Follow up:
Could you solve it with constant space complexity? 
(Note: The output array does not count as extra space for the purpose of space complexity analysis.)
*/

public class Solution {
    public int[] productExceptSelf(int[] nums) {
        
        
        int productArray[] = new int[nums.length];
       
        productArray[0] = 1;
        for( int i = 1 ; i < nums.length ; i++ )
        {
            productArray[i] = productArray[i-1] * nums[i-1];
            
        }
        
        int right = nums[nums.length-1];
        for( int i = nums.length-2 ; i >= 0 ; i-- )
        {
            productArray[i] = productArray[i] * right;
            right = right * nums[i];
        }
        
        
        return productArray;
        
    }
}
