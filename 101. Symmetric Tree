/*
Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).

For example, this binary tree [1,2,2,3,4,4,3] is symmetric:

    1
   / \
  2   2
 / \ / \
3  4 4  3

But the following [1,2,2,null,3,null,3] is not:

    1
   / \
  2   2
   \   \
   3    3

Note:
Bonus points if you could solve it both recursively and iteratively. 
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null)
            return true;
        
        String a = preorder(root);
        String b = modifiedPreorder(root);

        if(a.equals(b))
            return true;
        else
            return false;
        
    }
    
    private String preorder(TreeNode root){
    
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        StringBuilder sb = new StringBuilder();
        
        while(!stack.isEmpty())
        {
            TreeNode temp = stack.pop();
            if(temp != null)
            {
                sb.append(temp.val+",");
                stack.push(temp.right);
                stack.push(temp.left);
            }
            else
                sb.append("#,");
        }
        String returnString = sb.toString().substring(0,sb.length()-1);
        return returnString;
    }
    
    private String modifiedPreorder(TreeNode root){
    
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        StringBuilder sb = new StringBuilder();
        
        while(!stack.isEmpty())
        {
            TreeNode temp = stack.pop();
            if(temp != null)
            {
                sb.append(temp.val+",");
                stack.push(temp.left);
                stack.push(temp.right);
            }
            else
                sb.append("#,");
        }
        String returnString = sb.toString().substring(0,sb.length()-1);
        return returnString;
    }
    
    
    
}
