/*
Follow up for "Unique Paths":
Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and empty space is marked as 1 and 0 respectively in the grid.

For example,
There is one obstacle in the middle of a 3x3 grid as illustrated below.
[
  [0,0,0],
  [0,1,0],
  [0,0,0]
]

The total number of unique paths is 2.
Note: m and n will be at most 100.
*/


public class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        
        if(obstacleGrid == null || obstacleGrid.length == 0)
            return 0;
        
        int m = obstacleGrid.length;
        int n = obstacleGrid[0].length;
            
        if(m <= 0 || n <= 0)
            return 0;
        
        if(obstacleGrid[m-1][n-1] == 1 || obstacleGrid[0][0] == 1)
            return 0;
            
        int arr[][] = new int[m][n];
        int i=0, j=0;
        
        calcFirstColForDPArray(i, obstacleGrid, arr, m);
        calcFirstRowForDPArray(j, obstacleGrid, arr, n);
        calcRemPartOfDpArray(i, j, obstacleGrid, arr, m, n);
        
        return arr[m-1][n-1];
    }
    
    private void calcRemPartOfDpArray(int i, int j, int[][] obstacleGrid, int[][] arr, int m, int n)
    {   
        for(i=1; i<m; i++)
        {
            for(j=1; j<n; j++)
            {
                if(obstacleGrid[i][j] == 1)
                    arr[i][j] = 0;
                else
                    arr[i][j] = arr[i-1][j] + arr[i][j-1];
            }
        }
        
    }
    
    private void calcFirstColForDPArray(int i, int[][] obstacleGrid, int[][] arr, int m)
    {
        while(i<m && obstacleGrid[i][0] == 0){
            arr[i][0] = 1;
            i++;
        }
            
        while(i<m){
            arr[i][0] = 0;
            i++;
        }
    }
    
    private void calcFirstRowForDPArray(int j, int[][] obstacleGrid, int[][] arr, int n)
    {
        while(j<n && obstacleGrid[0][j] == 0){
            arr[0][j] = 1;
            j++;
        }
            
        while(j<n){
            arr[0][j] = 0;
            j++;
        }
    }
    
}
