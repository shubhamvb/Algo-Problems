/*
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

Note:

    The length of both num1 and num2 is < 110.
    Both num1 and num2 contains only digits 0-9.
    Both num1 and num2 does not contain any leading zero.
    You must not use any built-in BigInteger library or convert the inputs to integer directly.

*/

public class Solution {
    public String multiply(String num1, String num2) {
        
        if(num1.equals("") || num1.equals("0") || num2.equals("") || num2.equals("0"))
            return "0";
        
        StringBuilder sb1 = new StringBuilder(num1).reverse();
        StringBuilder sb2 = new StringBuilder(num2).reverse();
        
        String s1 = sb1.toString();
        String s2 = sb2.toString();
        StringBuilder sb = new StringBuilder();
        
        int arr[] = new int[num1.length()+num2.length()];
        
        for(int i=0; i<s1.length(); i++){
            
            for(int j=0; j<s2.length(); j++){
                
                arr[i+j] += (s1.charAt(i) - '0') * (s2.charAt(j) - '0');
            }
        }
        
        for(int i=0; i<arr.length; i++){
            int carry = arr[i] / 10;
            int modulus = arr[i] % 10;
            
            if(i < arr.length-1)
                arr[i+1] += carry;
            
            sb.insert(0, modulus);
            
        }
        
        while(sb.charAt(0) == '0' && sb.length() > 1)
            sb.deleteCharAt(0);
        
        return sb.toString();
    }
}
