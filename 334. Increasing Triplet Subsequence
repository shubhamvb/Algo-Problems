/*
Given an unsorted array return whether an increasing subsequence of length 3 exists or not in the array.

Formally the function should:
Return true if there exists i, j, k 
such that arr[i] < arr[j] < arr[k] given 0 ≤ i < j < k ≤ n-1 else return false.
Your algorithm should run in O(n) time complexity and O(1) space complexity.

Examples:
Given [1, 2, 3, 4, 5],
return true.

Given [5, 4, 3, 2, 1],
return false.

*/

public class Solution {
    public boolean increasingTriplet(int[] nums) {
        if(nums.length < 3)
            return false;
        int T[] = new int[nums.length];
        Arrays.fill(T, 1);
        int max = 1;
        
        for(int j = 1; j < nums.length; j++)
        {
            for(int i = 0; i < j; i++)
            {
                if(nums[i] < nums[j])
                {
                    T[j] = Math.max(T[j],T[i]+1);
                }
            }
            
            max = (T[j] > max) ? T[j] : max;
            if(max == 3)
                return true;
        }
        
        return false;
        
    }
}
