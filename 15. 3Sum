/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.
  
Note: The solution   set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]
*/

public class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        
        int temp = 0;
        List<List<Integer>> returnList = new ArrayList<List<Integer>>();

        Arrays.sort(nums);

        for( int i = 0 ; i < nums.length-2 ; i++ )
        {
            //The array is sorted. So if i(which is the smallest elemets of the triplet is positive, then the next two numbers of the triplet also have to be positive . and since three positive numbers cannot add up to 0. hence we break at this moment)
            if(nums[i] > 0)
                break;
            
            if (i == 0 || nums[i] > nums[i - 1])
            {
                int l = i+1;
                int r = nums.length-1;
                while( l < r )
                {
                    int sum = nums[i] + nums[l] + nums[r];
                    if( sum == 0 )
                    {
                        List<Integer> list = new ArrayList<Integer>();
                        list.add(nums[i]);
                        list.add(nums[l]);
                        list.add(nums[r]);
                        //if( !returnList.contains( list ))
                            returnList.add( list );
    
                        l++;
                        r--;
                        while (l < r && nums[r + 1] == nums[r]) r--;
                        while (l < r && nums[l - 1] == nums[l]) l++;
                    }
                    else if( sum > 0 )
                        r--;
                    else
                        l++;
                }
            }
        }
        return returnList;
        
    }
}
