/*
Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary search tree can be serialized to a string and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.

Note: Do not use class member/global/static variables to store states. Your serialize and deserialize algorithms should be stateless.
*/


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {
    
    
    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null)
            return null;
            
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        StringBuilder sb = new StringBuilder();
        
        while(!stack.isEmpty())
        {
            TreeNode temp = stack.pop();
            if(temp != null)
            {
                sb.append(temp.val+",");
                stack.push(temp.right);
                stack.push(temp.left);
            }
            else
                sb.append("#,");
        }
        String returnString = sb.toString().substring(0,sb.length()-1);
        
        return returnString;
            
        
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.equals(""))
            return null;
        
        String arr[] = data.split(",");
        int[] i={0};
        
        return deserializeTree(arr, i);
    }
    
    private TreeNode deserializeTree(String arr[], int[] i)
    {
        if(arr[i[0]].equals("#"))
            return null;
        
       TreeNode root = new TreeNode(Integer.parseInt(arr[i[0]]));

        i[0] = i[0] +1;
        root.left = deserializeTree(arr, i);
        i[0] = i[0] +1;
        root.right = deserializeTree(arr, i);
        
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
