/*
Given a binary tree, return the inorder traversal of its nodes' values.

For example:
Given binary tree [1,null,2,3],

   1
    \
     2
    /
   3

return [1,3,2]. 
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if(root == null)
            return result;
       
        Stack<TreeNode> stack = new Stack<>();
        TreeNode current = root; 
        
        while(!stack.isEmpty() || current != null)
        {
            if(current != null)
            {
                stack.push(current);
                current = current.left;
            }
            else
            {
                TreeNode temp = stack.pop();
                result.add(temp.val);
                current = temp.right;
            }
        }
        return result;
        
    }
}

 
public class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> l = new ArrayList<>();
            calc(root, l);
            return l;
    }
     
     private void calc(TreeNode root, List<Integer> l)
    {
        if(root == null)
            return;
        else{
            calc(root.left, l);
            l.add(root.val);
            calc(root.right, l);    
        }
    }
}
