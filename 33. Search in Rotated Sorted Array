/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
*/

public class Solution {
    public int search(int[] nums, int target) {
        if(nums.length == 0)
            return -1;
    
        if(nums.length == 1)
            if(nums[0] == target)
                return 0;
            else 
                return -1;
    
        int pivotIndex = findPivot(nums, 0, nums.length-1);
        
        if(pivotIndex == -1)
            return pivotIndex;
        if(target >= nums[pivotIndex+1] && target <= nums[nums.length-1] )
            return binarySearch(nums, pivotIndex+1, nums.length-1, target);
        else if(target >= nums[0] && target <= nums[pivotIndex])
            return binarySearch(nums, 0, pivotIndex, target);
        else
            return -1;
    }
    
    private int findPivot(int nums[], int left, int right)
    {
        
        for(int i = 0; i < nums.length - 1; i++)
        {
            if(nums[i] > nums[i+1])
                return i;
        }
        return 0;
    }
    
    private int binarySearch(int nums[], int left, int right, int target)
    {
        while(left <= right)
        {   
            int mid = (left + right) / 2;
            System.out.println(mid);
            if(nums[mid] == target)
                return mid;
            if(target > nums[mid])
                left = mid + 1;
            if(target < nums[mid])
                right = mid - 1; 
        }
        return -1;
    }
    
}
