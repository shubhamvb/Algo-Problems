/*
Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times. 
The algorithm should run in linear time and in O(1) space.
*/

public class Solution {
    public List<Integer> majorityElement(int[] nums) {
        List<Integer> l = new ArrayList<>();
        if(nums.length == 0)
            return l;
        
        if(nums.length == 1)
        {
            l.add(nums[0]);
            return l;
        }
        
        int element1 = nums[0], element2 = 0;
        int count1 = 1, count2 = 0;
        
        for(int i=1; i<nums.length; i++)
        {
            if(nums[i] == element1)
            {
                count1++;
            }
            else if(nums[i] == element1)
            {
                count2++;
            }
            else if(count1 == 0)
            {
                element1 = nums[i];
                count1 = 1;
            }
            else if(count2 == 0)
            {
                element2 = nums[i];
                count2 = 1;
            }
            else
            {
                count1--;
                count2--;
            }
        }
        //System.out.println(element1 +" "+ element2);
        int maxCount1 = 0, maxCount2 = 0;
        for(int i=0; i<nums.length; i++)
        {
            if(element1 == nums[i])
                maxCount1++;
            else if(element2 == nums[i])
                maxCount2++;
        }
        System.out.println(maxCount1 +" "+ maxCount2);
        System.out.println(nums.length);
        if(maxCount1 > nums.length/3)
            l.add(element1);
        if(maxCount2 > nums.length/3)
            l.add(element2);
        
        
        return l;
    }
}
