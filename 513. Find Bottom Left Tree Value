/*
 Given a binary tree, find the leftmost value in the last row of the tree.

Example 1:

Input:

    2
   / \
  1   3

Output:
1

Example 2:

Input:

        1
       / \
      2   3
     /   / \
    4   5   6
       /
      7

Output:
7

Note: You may assume the tree (i.e., the given root node) is not NULL. 
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int findBottomLeftValue(TreeNode root) {
        
        if(root == null)
            return -1;
        Deque<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        int bottomLeafValue = root.val;
        
        while(!queue.isEmpty())
        {
            TreeNode node = queue.poll();
            if(node.left == null && node.right == null)
                bottomLeafValue = node.val;
            if(node.right != null)
                queue.addLast(node.right);
            if(node.left != null)
                queue.addLast(node.left);
            
            
        }
        return bottomLeafValue;
    }
} 
