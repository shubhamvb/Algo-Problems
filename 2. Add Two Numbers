/*
You are given two linked lists representing two non-negative numbers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        
        int num1=0, num2=0,i=0,j=0;
        int carry = 0;
        
        ListNode p3 = new ListNode(0);
        ListNode l3 = p3;
        
        while( l1 != null || l2 != null )
        {
            
            int x = 0;
            if( l1 != null )
            {
                x += l1.val;
                l1 = l1.next;
            }
                
            if( l2 != null )
            {
                x += l2.val;
                l2 = l2.next;
            }
            
            x += carry;
            
            if( x >= 10)
            {
                carry = x / 10;  
                //System.out.println("b"+x%10);
                l3.next = new ListNode( x % 10 );
                l3 =l3.next;
            }
            else
            {
                carry = 0;
                l3.next = new ListNode( x % 10 );
                l3 =l3.next;
                
            }        
            
        }
        
        if( carry != 0 )
        {
             l3.next = new ListNode( carry );
                l3 =l3.next;
        }
             
        return p3.next;
        
    }
}
