/*
Given a list, rotate the list to the right by k places, where k is non-negative.

For example:
Given 1->2->3->4->5->NULL and k = 2,
return 4->5->1->2->3->NULL.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode rotateRight(ListNode head, int k) {
        
        if(head == null || k==0)
            return head;
        ListNode first = head, second = head;
        
        int length = calcLength(first); 
        
        first = head;
        int shift = k % length;
        if(shift == 0)
            return head;
       
       
        for(int i=0; i<shift; i++){
                first = first.next;
        }
        
            
        while(first.next != null)
        {
            first = first.next;
            second = second.next;
        }
        ListNode newHead = second.next;
        second.next = null;
        first.next = head;
        
        return newHead;
    }
    
    private int calcLength(ListNode first)
    {
        int length = 0;
        while(first != null)
        {
            length++;
            first = first.next;
        }
        return length; 
    } 
}
