/*
Given a complete binary tree, count the number of nodes.

Definition of a complete binary tree from Wikipedia:
In a complete binary tree every level, except possibly the last, is completely filled, and all nodes in the last level 
are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int countNodes(TreeNode root) {
        
        if(root == null)
            return 0;
        int lHeight = getLeftmostHeight(root.left)+1;
        int rHeight = getRightmostHeight(root.right)+1;
        
        if(lHeight == rHeight)
            return (2<<(lHeight-1))- 1;
        else
            return 1 + countNodes(root.left) + countNodes(root.right);
    }
    
    private int getRightmostHeight(TreeNode root)
    {
        if(root == null)
            return 0;
        
        int count = 1;
        while(root.right != null)
        {
            root = root.right;
            count++;
        }
        return count;
    }
    
    private int getLeftmostHeight(TreeNode root)
    {
        if(root == null)
            return 0;
        
        int count = 1;
        while(root.left != null)
        {
            root = root.left;
            count++;
        }
        return count;
    }
     
}

