/*
Given two words word1 and word2, find the minimum number of steps required to convert word1 to word2. 
(each operation is counted as 1 step.)

You have the following 3 operations permitted on a word:

a) Insert a character
b) Delete a character
c) Replace a character
*/

public class Solution {
    public int minDistance(String word1, String word2) {
        if(word1.length() == 0 && word2.length() == 0)
            return 0;
        else if(word1.length() == 0)
            return word2.length();
        else if(word2.length() == 0)
            return word1.length();
        
        int n = word1.length()+1;
        int m = word2.length()+1;
        int dp[][] = new int[m][n];
        
        for(int j=0; j<n; j++)
            dp[0][j] = j;
        for(int i=0; i<m; i++)
            dp[i][0] = i;
            
        for(int i=1; i<m; i++){
            for(int j=1; j<n; j++){
                
                if(word1.charAt(j-1) != word2.charAt(i-1))
                    dp[i][j] = getMin(dp[i-1][j], dp[i][j-1], dp[i-1][j-1]) + 1;
                else
                    dp[i][j] = dp[i-1][j-1];
                
            }
        }
        
        return dp[m-1][n-1];
        
    }
    
    private int getMin(int i, int j, int k)
    {
        int min = 0;
        min = Math.min(i, j);
        min = Math.min(min, k); 
        return min; 
    }
}
