/*
 Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]

*/

public class Solution {
	    int totalNumber = 1 << S.length;
	    System.out.println("totalNumber" + totalNumber);
	    List<List<Integer>> collection = new ArrayList<List<Integer>>(totalNumber);
	    for (int i=0; i<totalNumber; i++) 
	    {
		    List<Integer> set = new LinkedList<Integer>();
		    for (int j=0; j<S.length; j++) 
		    {
			    if ((i & (1<<j)) != 0) 
				    set.add(S[j]);
			}
		
		//System.out.println(set);
		//System.out.println("******************");
		collection.add(set);
	    }
	return collection;
  }      

public class Solution {
    public List<List<Integer>> subsets(int[] nums) 
    {
        List<List<Integer>> result = new ArrayList<>();
        
        if(nums == null || nums.length == 0)
            return result;
       
        Arrays.sort(nums);
        
	    for (int i = 0; i < nums.length; i++) 
	    {
		    List<List<Integer>> temporary = new ArrayList<>();
 
		
    		for (List<Integer> res : result) 
    			temporary.add(new ArrayList<Integer>(res));
		
    		for (List<Integer> temp : temporary) 
    			temp.add(nums[i]);
    		
 
		
		    List<Integer> l = new ArrayList<Integer>();
		    l.add(nums[i]);
		    temporary.add(l);
 
		    result.addAll(temporary);
	    }
 
	result.add(new ArrayList<Integer>());
	return result;
           
    }
}
