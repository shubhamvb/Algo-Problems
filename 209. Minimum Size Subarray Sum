/*
 Given an array of n positive integers and a positive integer s, find the minimal length of a contiguous subarray of which the sum â‰¥ s. If there isn't one, return 0 instead.

For example, given the array [2,3,1,2,4,3] and s = 7,
the subarray [4,3] has the minimal length under the problem constraint. 
*/

public class Solution {
    public int minSubArrayLen(int s, int[] nums) {
        
        if(nums.length == 0)
            return 0;
            
        if(nums.length == 1)
            if(nums[0] >= s)
                return 1;
            else
                return 0;
            
        int start = 0;
        int end = nums.length - 1;
        int l = 0, r = 0;
        boolean counter = false;
        int currentSum = 0;
        
        while(r <= nums.length - 1)
        {
            if( calcSum(nums,l,r) >= s)
            {
                counter = true;
                    if((r - l) < (end - start))
                    {
                        start = l;
                        end = r;
                    }           
                l++;
            }    
            
            else 
                r++;
        }
        
        if(counter)
            return end - start + 1;
        else
            return 0;
    }
    
    private int calcSum(int nums[], int l, int r)
    {
        int sum = 0;
        for(int i = l ; i <= r; i++)
            sum += nums[i];
        
        return sum;
    }
}
