/*
Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode mergeKLists(ListNode[] lists) {
        if(lists == null || lists.length == 0)
            return null;
        
        ListNode m = new ListNode(-1);
        ListNode n = m;
        
       Comparator<ListNode> comparator =  new Comparator<ListNode>() {
            public int compare(ListNode l1,ListNode l2)
            {
                return l1.val-l2.val;
            }
        };
        
        PriorityQueue<ListNode> queue = new PriorityQueue<ListNode>(lists.length, comparator );
        
        for(ListNode l : lists)
            if(l != null)
                queue.add(l);
            
        while(!queue.isEmpty())
        {
            ListNode currentNode = queue.poll();
            n.next = currentNode;
            n = n.next;
            
            if(currentNode.next != null)
                queue.add(n.next);
         
        }
        
        return m.next;
    }
}
