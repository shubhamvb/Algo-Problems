/*
Given a linked list, swap every two adjacent nodes and return its head.

For example,
Given 1->2->3->4, you should return the list as 2->1->4->3.

Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed. 
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode swapPairs(ListNode head) {
        
        ListNode l1= head;
        while( l1 != null )
        {
            if( l1.next != null )
            {
                int x = l1.val;
                int y = l1.next.val;
                l1.val = y;
                l1.next.val = x;
            
                
                l1 = l1.next;
                l1=l1.next;
                
            }
            else
            {
                l1 = l1.next;
            }
            
        }
        
        return head;
        
        
    }
}
