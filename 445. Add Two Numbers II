/*
You are given two non-empty linked lists representing two non-negative integers. 
The most significant digit comes first and each of their nodes contain a single digit. 
Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.

Example:

Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        
        if( l1 == null )
            return l2;
        else if ( l2 == null )
            return l1;
        
        ListNode reversedl1 = null;
        ListNode reversedl2 = null;
        
        while( l1 != null )
        {
            ListNode next = l1.next;
            l1.next = reversedl1;
            reversedl1 = l1;
            l1 = next;
        }
        
        while( l2 != null )
        {
            ListNode next = l2.next;
            l2.next = reversedl2;
            reversedl2 = l2;
            l2 = next;
        }
        
        ListNode addedListNode = new ListNode(0);
        ListNode current = addedListNode;
        //ListNode current = null;
        int carry = 0;
        int value = 0;
        while( reversedl1 != null || reversedl2 != null )
        {
            
               value = (reversedl1 != null ? reversedl1.val : 0 ) + (reversedl2 != null ? reversedl2.val : 0) + carry;   
               if( value >= 10)
               {
                   value %= 10;
                   carry = 1;
               }
               else
               {
                   carry = 0;
               }
               current.val = value;
               current.next = new ListNode(0);
               current = current.next;
               
               reversedl1 = (reversedl1 != null ? reversedl1.next : reversedl1 );
               reversedl2 = (reversedl2 != null ? reversedl2.next : reversedl2 );
               
           
        }
        int counter = 0;
        if( carry > 0 )
            current.val = carry;
        else
            counter = 1;
        //return addedListNode;
        
        ListNode reversedAddedListNode = null;
        while( addedListNode != null )
        {
            ListNode next1 = addedListNode.next;
            addedListNode.next = reversedAddedListNode;
            reversedAddedListNode = addedListNode;
            addedListNode = next1;
        }
       
       if( counter == 1 )
            return reversedAddedListNode.next;
       else
            return reversedAddedListNode;
    }
}

