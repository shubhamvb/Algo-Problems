/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note:
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int kthSmallest(TreeNode root, int k) {
        int result = 0;
        Stack<TreeNode> stack = new Stack<>();
        TreeNode currentNode = root;
        
        while(!stack.isEmpty() || currentNode != null)
        {
            if(currentNode != null)
            {
                stack.push(currentNode);
                currentNode = currentNode.left;
            }
            else
            {
                TreeNode temp = stack.pop();
                if(--k == 0)
                {
                    result = temp.val;
                    break;
                }
                currentNode = temp.right;
            }
        }
        
        return result;
}
}
