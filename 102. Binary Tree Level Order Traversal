/*
Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).

For example:
Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

return its level order traversal as:

[
  [3],
  [9,20],
  [15,7]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> returnList = new ArrayList<>();
        if(root == null)
            return returnList;
            
        Deque<TreeNode> dequeue = new LinkedList<>();
        dequeue.add(root);
        
        while(!dequeue.isEmpty())
        {
            List<Integer> tempList = new ArrayList<>();
            int size = dequeue.size();
            while(size-- > 0)
            {
                TreeNode node = dequeue.poll();
                tempList.add(node.val);
                if(node.left != null)
                    dequeue.addLast(node.left);
                if(node.right != null)
                    dequeue.addLast(node.right);
                
            }
            returnList.add(tempList);
            
        }
        return returnList;
    }
}

