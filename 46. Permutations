/*
 Given a collection of distinct numbers, return all possible permutations.

For example,
[1,2,3] have the following permutations:

[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

*/

public class Solution {
    public List<List<Integer>> permute(int[] nums) {
        
        List<Integer> list = new ArrayList<Integer>();
        list.add( 0 , nums[0] );
        
        List<List<Integer>> nestedList = new ArrayList<List<Integer>>();
        nestedList.add( list );
        
        int size1 = 0;
        
        for( int i = 1 ; i < nums.length ; i++ )
        {
            int nestedListSize = nestedList.size();
            
            for( int j = 0 ; j < nestedListSize ; j++ )
            {
                size1 = nestedList.get(j).size();
                
                for( int k = 0 ; k <= size1 ; k++ )
                {
                    List<Integer> a = new ArrayList<Integer>( nestedList.get(j) );
                    a.add( k , nums[i] );
                    nestedList.add( a );
                }
            }
            
            for( int j = 0 ; j < nestedListSize ; j++ )
            {
                nestedList.remove( 0 );
            }
            
            
        }
        
        return nestedList;
        
    }
    
}
